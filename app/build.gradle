apply from: '../versions.gradle'

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'com.google.gms:google-services:3.0.0'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'io.fabric.tools:gradle:1.21.7'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.hugo'
//apply plugin: 'io.fabric' // TODO: uncomment when having set the Fabric API key
apply plugin: 'me.tatarka.retrolambda'

def getSignInformation = { keystorePath, keystorePropertyPath ->
    def keyStore = file(keystorePath)
    if (!keyStore.exists()) {
        logger.error("Keystore file not found, path=${keyStore.absolutePath}")
        return
    }
    def propertiesFile = file(keystorePropertyPath)
    if (!propertiesFile.exists()) {
        logger.error("Keystore properties file not found, path=${propertiesFile.absolutePath}")
        return
    }
    def Properties properties = new Properties()
    properties.load(new FileInputStream(propertiesFile))
    return [
            storeFile    : keyStore,
            storePassword: properties["store_password"],
            keyAlias     : properties["key_alias"],
            keyPassword  : properties["key_password"]
    ]
}

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion
    defaultConfig {
        applicationId 'com.xmartlabs.template'
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        testInstrumentationRunner "${applicationId}.TestRunner"
        versionCode versionCodeId
        versionName '0.1.0'
    }
    signingConfigs {
        //noinspection GroovyMissingReturnStatement
        debug {
            def signInformation = getSignInformation("debug.keystore", "keystore.properties")
            if (signInformation != null) {
                storeFile signInformation.storeFile
                storePassword signInformation.storePassword
                keyAlias signInformation.keyAlias
                keyPassword signInformation.keyPassword
            }
        }
        //noinspection GroovyMissingReturnStatement
        release {
            def signInformation = getSignInformation("release.keystore", "keystore.properties")
            if (signInformation != null) {
                storeFile signInformation.storeFile
                storePassword signInformation.storePassword
                keyAlias signInformation.keyAlias
                keyPassword signInformation.keyPassword
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            //noinspection GrUnresolvedAccess
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //noinspection GrUnresolvedAccess,GroovyAssignabilityCheck
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions 'version', 'env'
    productFlavors {
        //noinspection GroovyMissingReturnStatement
        production {
            dimension 'env'
        }

        staging {
            dimension 'env'
            applicationIdSuffix '.staging'
        }

        lollipopAndAbove {
            dimension 'version'
            minSdkVersion 21 // For faster multidex compilation
        }

        allVersions {
            dimension 'version'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //noinspection GroovyMissingReturnStatement
    lintOptions {
        warning 'InvalidPackage'
    }
    packagingOptions {
        exclude '.readme'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    androidTestApt "com.github.tbroyer.bullet:bullet-compiler:${bulletVersion}"
    androidTestApt "com.google.dagger:dagger-compiler:${daggerVersion}"
    androidTestCompile "com.android.support:support-annotations:${androidSupportVersion}"
    androidTestCompile "com.android.support.test:rules:${androidSupportTestVersion}"
    androidTestCompile("com.android.support.test:runner:${androidSupportTestVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:${espressoVersion}") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-core:${espressoVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-intents:${espressoVersion}"
    androidTestCompile "com.github.andrzejchm.RESTMock:android:${restMockVersion}"
    androidTestCompile("com.github.andrzejchm.RESTMock:core:${restMockVersion}") {
        exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
    }
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestCompile "com.crittercism.dexmaker:dexmaker:${dexmakerVersion}"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:${dexmakerVersion}"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:${dexmakerVersion}"
    androidTestCompile "com.google.code.findbugs:jsr305:${jsr305Version}" // Added to prevent dependencies conflict between main and test
    androidTestCompile 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'
    androidTestCompile "com.squareup.okhttp3:okhttp:${okHttpVersion}" // Added to prevent dependencies conflict between main and test
    androidTestCompile "com.squareup.okhttp3:mockwebserver:${okHttpVersion}" // Added to prevent dependencies conflict between main and test
    androidTestCompile "com.squareup.okio:okio:${okioVersion}" // Added to prevent dependencies conflict between main and test
    androidTestCompile "org.mockito:mockito-core:${mockitoVersion}"
    apt "com.f2prateek.dart:dart-processor:${dartVersion}"
    apt "com.f2prateek.dart:henson-processor:${dartVersion}"
    apt "com.github.Raizlabs.DBFlow:dbflow-processor:${dbFlowVersion}"
    apt "com.github.tbroyer.bullet:bullet-compiler:${bulletVersion}"
    provided "com.google.dagger:dagger-compiler:${daggerVersion}"
    apt "com.hannesdorfmann.fragmentargs:processor:${fragmentArgsVersion}"
    apt "com.jakewharton:butterknife-compiler:${butterKnifeVersion}"
    apt "org.parceler:parceler:${parcelerVersion}"
    apt "org.projectlombok:lombok:${lombokVersion}"
    compile "com.android.support:appcompat-v7:${androidSupportVersion}"
    compile "com.android.support:cardview-v7:${androidSupportVersion}"
    compile "com.android.support:design:${androidSupportVersion}"
    compile "com.android.support:recyclerview-v7:${androidSupportVersion}"
    compile "com.android.support:support-v13:${androidSupportVersion}"
    compile "com.annimon:stream:${streamVersion}"
    compile('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
        transitive = true
    }
    compile "com.f2prateek.dart:dart:${dartVersion}"
    compile "com.f2prateek.dart:henson:${dartVersion}"
    compile 'com.github.mrmike:Ok2Curl:0.2.5'
    compile "com.github.Raizlabs.DBFlow:dbflow-core:${dbFlowVersion}"
    compile "com.github.Raizlabs.DBFlow:dbflow:${dbFlowVersion}"
    compile 'com.github.square.picasso:picasso:8c16e8564e'
    compile "com.github.tbroyer.bullet:bullet:${bulletVersion}"
    compile "com.google.dagger:dagger:${daggerVersion}"
    compile "com.hannesdorfmann.fragmentargs:annotation:${fragmentArgsVersion}"
    compile "com.hannesdorfmann.fragmentargs:bundler-parceler:${fragmentArgsVersion}"
    compile "com.jakewharton:butterknife:${butterKnifeVersion}"
    compile "com.jakewharton.threetenabp:threetenabp:${localDateBackportVersion}"
    compile "com.jakewharton.timber:timber:${timberVersion}"
    compile "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"
    compile "com.squareup.okio:okio:${okioVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.trello.rxlifecycle2:rxlifecycle:${rxLifecycleVersion}"
    compile "com.trello.rxlifecycle2:rxlifecycle-components:${rxLifecycleVersion}"
    compile 'com.viewpagerindicator:library:2.4.1@aar'
    compile 'com.wdullaer:materialdatetimepicker:2.5.0'
    compile "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"
    compile "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"
    compile "org.parceler:parceler-api:${parcelerVersion}"
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(path: ':core')
    provided "org.projectlombok:lombok:${lombokVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile ('org.threeten:threetenbp:1.3.2') {
        exclude group:'com.jakewharton.threetenabp', module:'threetenabp'
    }
    compile project(path: ':retrofit')
}

//apply plugin: 'com.google.gms.google-services' // TODO: enable when adding google-services.json
