def getBintrayInformation = { propertyFilePath ->
    def propertiesFile = file(propertyFilePath)
    if (!propertiesFile.exists()) {
        logger.warn("Bintray properties file not found, path=${propertiesFile.absolutePath}")
        return
    }
    def Properties properties = new Properties()
    properties.load(new FileInputStream(propertiesFile))
    return [
            user  : properties["bintray_user"],
            apiKey: properties["bintray_api_key"],
    ]
}

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId project.ext.applicationId
            artifactId project.ext.PUBLISH_ARTIFACT_ID
            version project.ext.librariesVersion
            name project.ext.PUBLISH_ARTIFACT_ID
            url project.ext.websiteUrl
            inceptionYear '2017'
            licenses {
                license {
                    name 'Apache-2.0'
                    url 'https://github.com/xmartlabs/bigbang/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                connection project.ext.vcsUrl
                developerConnection project.ext.vcsUrl
                url project.ext.websiteUrl
            }
        }
    }
}

bintray {
    def bintrayInfo = getBintrayInformation("../bintray.properties")
    if (bintrayInfo == null) {
        return
    }

    user = bintrayInfo.user
    key = bintrayInfo.apiKey
    pkg {
        repo = 'Android-Base-Project'
        name = "${project.ext.projectName}"
        userOrg = 'xmartlabs'

        version {
            name = project.ext.versionCodeNumber
            released = new Date()
            vcsTag = "${project.ext.versionCodeNumber}"
        }

        licenses = ['Apache-2.0']
        vcsUrl = "${project.ext.vcsUrl}"
        websiteUrl = "${project.ext.websiteUrl}"
    }
    configurations = ['archives']
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    options.linkSource true
    classpath = configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadocJar.dependsOn javadoc

artifacts {
    archives javadocJar
    archives sourcesJar
}
